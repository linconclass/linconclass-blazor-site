# Nome do Workflow: Compilar e Publicar Blazor WASM
name: Deploy Blazor WASM to GitHub Pages

on:
  # Aciona no push para o branch principal
  push:
    branches: ["master"] # Seu branch principal

  # Permite rodar manualmente pela aba Actions
  workflow_dispatch:

# Define permissões
permissions:
  contents: read
  pages: write
  id-token: write

# Permite apenas um deploy concorrente
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (Pegar o código)
        uses: actions/checkout@v4

      # ETAPA 1: INSTALAR O .NET
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          # Versão do seu projeto .NET 10.0 (Prévia)
          dotnet-version: '10.0.x' 

      # ETAPA 2: COMPILAR O BLAZOR
      - name: Restore and Publish Blazor WASM
        # Caminho do .csproj (nome da pasta / nome do arquivo .csproj)
        # A saída da compilação vai para a pasta 'app_output'
        run: dotnet publish linconclass/linconclass.csproj -c Release -o app_output

      - name: Setup Pages
        uses: actions/configure-pages@v5

      # ETAPA 3: FAZER UPLOAD DO RESULTADO COMPILADO
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # O caminho final dos arquivos estáticos é: pasta de saída / wwwroot
          path: 'app_output/wwwroot'

      # ETAPA 4: FAZER O DEPLOY
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4